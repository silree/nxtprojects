package org.programus.nxj.guessnumber.game;

import javax.microedition.lcdui.Image;

import lejos.nxt.LCD;
import lejos.nxt.Sound;

import org.programus.nxj.guessnumber.utils.BallScanner;
import org.programus.nxj.guessnumber.utils.ColorCombination;
import org.programus.nxj.guessnumber.utils.CompareResult;
import org.programus.nxj.guessnumber.utils.Constants;
import org.programus.nxj.guessnumber.utils.ScoreDisplay;
import org.programus.nxj.util.DisplayUtil;
import org.programus.nxj.util.SoundUtil;

public class GuessGame {
	private BallScanner ballScanner; 
	private ScoreDisplay exactScoreDisplay;
	private ScoreDisplay existScoreDisplay; 
	
	private static final Image EXACT_IMG = new Image(6, 6, new byte[] {
			(byte) 0x1e, (byte) 0x3f, (byte) 0x3f, (byte) 0x3f, (byte) 0x3f,
			(byte) 0x1e, });
	private static final Image EXIST_IMG = new Image(6, 6, new byte[] {
			(byte) 0x1e, (byte) 0x33, (byte) 0x21, (byte) 0x21, (byte) 0x33,
			(byte) 0x1e, });
	private static final Image BLANK_IMG = new Image(6, 6, new byte[] {
			(byte) 0x33, (byte) 0x3f, (byte) 0x1e, (byte) 0x1e, (byte) 0x3f,
			(byte) 0x33, });
	private static final Image WIN_IMG = new Image(100, 64, new byte[] {
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x3c, (byte) 0xc4, (byte) 0x0c,
			(byte) 0x18, (byte) 0xe0, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0xe0, (byte) 0x18, (byte) 0x06, (byte) 0x01,
			(byte) 0xc1, (byte) 0x7e, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0xf0, (byte) 0xd8, (byte) 0x88, (byte) 0x09, (byte) 0x3f,
			(byte) 0xfc, (byte) 0xa0, (byte) 0xa3, (byte) 0x66, (byte) 0x28,
			(byte) 0x27, (byte) 0x20, (byte) 0x40, (byte) 0xf8, (byte) 0x8f,
			(byte) 0x81, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x03, (byte) 0x1e, (byte) 0x31, (byte) 0x43, (byte) 0x46,
			(byte) 0x44, (byte) 0x47, (byte) 0x42, (byte) 0x46, (byte) 0x44,
			(byte) 0x44, (byte) 0x44, (byte) 0x40, (byte) 0x70, (byte) 0x08,
			(byte) 0x07, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x18,
			(byte) 0x78, (byte) 0xf8, (byte) 0xf0, (byte) 0xc0, (byte) 0xf0,
			(byte) 0xf8, (byte) 0x78, (byte) 0x18, (byte) 0x08, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x80, (byte) 0x80, (byte) 0x80,
			(byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x00,
			(byte) 0x00, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0xf8, (byte) 0xf8, (byte) 0xf8, (byte) 0x00,
			(byte) 0x00, (byte) 0xf8, (byte) 0xf8, (byte) 0xf8, (byte) 0x00,
			(byte) 0x00, (byte) 0xf8, (byte) 0xf8, (byte) 0xf8, (byte) 0x00,
			(byte) 0x00, (byte) 0xb8, (byte) 0xb8, (byte) 0xb8, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x80,
			(byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xf8, (byte) 0xf8,
			(byte) 0xf8, (byte) 0xf8, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x1e,
			(byte) 0x7f, (byte) 0x7f, (byte) 0xf3, (byte) 0xe3, (byte) 0xe3,
			(byte) 0xe3, (byte) 0x7f, (byte) 0x7f, (byte) 0x1e, (byte) 0x00,
			(byte) 0x00, (byte) 0x3f, (byte) 0x7f, (byte) 0xff, (byte) 0xe0,
			(byte) 0xe0, (byte) 0xff, (byte) 0x7f, (byte) 0x3f, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x3f, (byte) 0xff, (byte) 0xff, (byte) 0xe0,
			(byte) 0xe0, (byte) 0x7f, (byte) 0x7f, (byte) 0xff, (byte) 0xe0,
			(byte) 0xe0, (byte) 0xff, (byte) 0x7f, (byte) 0x3f, (byte) 0x00,
			(byte) 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0xfe, (byte) 0xff, (byte) 0xff,
			(byte) 0x03, (byte) 0x03, (byte) 0xff, (byte) 0xff, (byte) 0xfe,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x63, (byte) 0xf7,
			(byte) 0xf7, (byte) 0xf7, (byte) 0x60, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
			(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, });
	
	public GuessGame() {
		ballScanner = new BallScanner(); 
		ballScanner.init(); 
		exactScoreDisplay = new ScoreDisplay(true); 
		existScoreDisplay = new ScoreDisplay(false); 
	}
	
	public boolean playOneGame() {
		ColorCombination answer = ColorCombination.getRandomCombination(Constants.COLOR_TYPES, Constants.COLOR_LIMIT); 
		ballScanner.startScanThread(); 
		
		boolean ret = false;
		for (int i = 0; i < Constants.CHANGES; i++) {
			ColorCombination guess = ballScanner.getColorCombination(); 
			CompareResult result = answer.compareTo(guess); 
			if (result.exactCorrect == Constants.BALL_NUM) {
				exactScoreDisplay.congratulationWin(); 
				existScoreDisplay.congratulationWin(); 
				this.playWinSound(); 
				LCD.clear();
				this.drawWin(i); 
				ret = true;
				break;
			} else {
				result.displayScore(exactScoreDisplay, existScoreDisplay); 
				this.playTurnSound(i); 
				this.drawGuess(guess, i); 
				this.drawResult(result, i); 
			}
			LCD.refresh();
		}
		if (!ret) {
			exactScoreDisplay.displayScore(0); 
			existScoreDisplay.displayScore(0); 
			this.drawLose(answer); 
			Sound.buzz(); 
		}
		ballScanner.stopScanThread(); 
		return ret;
	}
	
	private void drawGuess(ColorCombination guess, int chance) {
		LCD.drawString(guess.toLcdString(), 0, chance); 
	}
	
	private void drawResult(CompareResult result, int chance) {
		final int RIGHT_GAP = 2;
		int w = 0; 
		int n = Constants.BALL_NUM - result.exactCorrect - result.existCorrect; 
		for (int i = 0; i < n; i++) {
			DisplayUtil.drawImageRight(BLANK_IMG, chance << 3, RIGHT_GAP + w, LCD.ROP_COPY); 
			w += BLANK_IMG.getWidth(); 
		}
		for (int i = 0; i < result.existCorrect; i++) {
			DisplayUtil.drawImageRight(EXIST_IMG, chance << 3, RIGHT_GAP + w, LCD.ROP_COPY); 
			w += EXIST_IMG.getWidth(); 
		}
		for (int i = 0; i < result.exactCorrect; i++) {
			DisplayUtil.drawImageRight(EXACT_IMG, chance << 3, RIGHT_GAP + w, LCD.ROP_COPY); 
			w += EXACT_IMG.getWidth();
		}
	}
	
	private void drawWin(int chance) {
		DisplayUtil.drawImageCenter(WIN_IMG, 0, LCD.ROP_COPY); 
		String msg = "in " + chance + " steps"; 
		DisplayUtil.drawStringCenter(msg, 7); 
	}
	
	private void drawLose(ColorCombination answer) {
		DisplayUtil.drawStringCenter("Sorry, you lose.", 3); 
		DisplayUtil.drawStringCenter("The answer is:", 4); 
		DisplayUtil.drawStringCenter(answer.toLcdString(), 5); 
	}
	
	private void playTurnSound(final int chance) {
		new Thread(new Runnable() {
			@Override
			public void run() {
				int duration = 100; 
				SoundUtil.playNote(5 + chance / 7, chance % 7, false, duration, true); 
			}
		}).start(); 
	}
	
	private void playWinSound() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				int duration = 100; 
				SoundUtil.playNote(5, 1, false, duration, true); 
				SoundUtil.playNote(5, 2, false, duration, true); 
				SoundUtil.playNote(5, 3, false, duration, true); 
				duration = 200; 
				SoundUtil.playNote(5, 5, false, duration, true); 
				duration = 100; 
				SoundUtil.playNote(5, 3, false, duration, true); 
				duration = 500; 
				SoundUtil.playNote(5, 5, false, duration, true); 
			}
		}).start(); 
	}
}
